<script>

  // Set web chat size and position. 
  const customElement = document.getElementById("WebChatContainer");

  function viewChangeHandler(event, instance){
    if (event.newViewState.mainWindow){
      instance.elements.getMainWindow().removeClassName('HideWebChat');
    } else {
      instance.elements.getMainWindow().addClassName('HideWebChat');
    }
  }

  /* function generateRandomUserID(){
    const userIDs = new Uint32Array(10);
    self.crypto.getRandomValues(userIDs);
    return userID[Math.floor(Math.random() * 10)];
  } */

  async function onLoad(instance){    
    instance.on({ type: 'view:change', handler: viewChangeHandler });

    // instance.updateUserID(``) 

    instance.on({ type: 'send', handler: saveMessage });
    instance.on({ type: 'receive', handler: saveMessage });
    instance.on({ type: 'history:begin', handler: saveHistory });

    instance.updateCustomMenuOptions('bot', [{ text: 'Download History', handler: doDownload }]);
    
    await instance.render();
  }

  // Enable transcript download. 
  const messages = [];

  function saveMessage(event){
    messages.push(event.data);
  }

  function saveHistory(event){
    messages.push(...event.messages);
  }
  
  function createDownload(){
    const downloadLines = [createDownloadText('From', 'Message')];

    messages.forEach(message => {
      if (message.input?.text) { // Message that came from the user.
        downloadLines.push(createDownloadText('You', message.input.text));
      } else if (message.output?.generic?.length){ // Message that came from assistant. Can contain an array of individual message items.
        message.output?.generic.forEach(messageItem => { 
          if (messageItem?.text){ // Handle text response.
            downloadLines.push(createDownloadText('Lendyr', messageItem.text));
          }
        });
      }
    });

    return downloadLines.join('\n');
  }

  function doDownload(){
    const downloadContent = createDownload();

    const blob = new Blob([downloadContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);

    // To automatically trigger a download, we have to create a fake "a" element and then click it.
    const timestamp = new Date().toISOString().replace(/[_:]/g, '-').replace(/.[0-9][0-9][0-9]Z/, '');
    const a = document.createElement('a');
    a.setAttribute('href', url);
    a.setAttribute('download', `Chat History ${timestamp}.csv`);
    a.click();
  }

  // Embed web chat. 
  window.watsonAssistantChatOptions = {
    integrationID: "172046f8-8af2-4730-9991-e25ea7bde2d1", // The ID of this integration.
    region: "us-south", // The region your integration is hosted in.
    serviceInstanceID: "a0ac6602-f8b8-4b0e-9343-df33259cc078", // The ID of your service instance.
    element: customElement,
    closePanelButtonConfig:{
      is_on: false,
    },
    onLoad: onLoad,
  };

  setTimeout(function () {
    const t = document.createElement("script");
    t.src =
      "https://web-chat.global.assistant.watson.appdomain.cloud/versions/" +
      (window.watsonAssistantChatOptions.clientVersion || "latest") +
      "/WatsonAssistantChatEntry.js";
    document.head.appendChild(t);
  });

</script>